create procedure [{0}].[Load_{8}{1}]
    @LoadLogId bigint
as 
begin
	/* 
	 * This is auto-generated code from template: Load_StandardMerge.sql  
	 * Generated by the Generator C# program which can be found at https://github.com/DrJohnT/MetadataGenerator
	 * DO NOT MODIFY!
	 */
	set nocount on;

	declare @CountOfInsertedRows int = null,
		@CountOfUpdatedRows int = null,
		@CountOfDeletedRows int = null,
		@errorMsg nvarchar(max),
		@errorLine int;

    declare @SqlAction table
    (
        SqlAction nvarchar(20)
    );

    exec Logging.Log_ProcedureCall 
		@LoadLogId=@LoadLogId, 
		@ProcedureObjectID=@@PROCID, 
		@ActionType=N'START';

	begin try

		merge [{2}].[{1}] as T 
		using [{0}].[{1}Insert] as S
		on {3} 
		when matched and ({4})
		then update set 
				{5}
		when not matched by target then 
		insert ({6},
			LoadLogId
		) 
		values ({7},
			@LoadLogId
		)
		--when not matched by source {9}then 
		--     delete
		output
            $action
        into @SqlAction;

        select
                @CountOfInsertedRows = COUNT(*)
        from    @SqlAction
        where   SqlAction = N'INSERT';

        select
                @CountOfUpdatedRows = COUNT(*)
        from    @SqlAction
        where   SqlAction = N'UPDATE';

        select
                @CountOfDeletedRows = COUNT(*)
        from    @SqlAction
        where   SqlAction = N'DELETE';
		
	end try
	begin catch

		select @errorMsg = error_message(), @errorLine = error_line();

		exec Logging.Log_ProcedureCall 
			@LoadLogId=@LoadLogId, 
			@ProcedureObjectID=@@PROCID, 
			@ActionType=N'ERROR';

		throw 50000, @errorMsg, 16;

	end catch

	exec Logging.Log_ProcedureCall 
		@LoadLogId=@LoadLogId, 
		@ProcedureObjectID=@@PROCID, 
		@ActionType=N'END', 
		@CountOfInsertedRows = @CountOfInsertedRows,
		@CountOfUpdatedRows = @CountOfUpdatedRows,
		@CountOfDeletedRows = @CountOfDeletedRows;
end	

